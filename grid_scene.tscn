[gd_scene load_steps=10 format=2]

[ext_resource path="res://Assets/VoxelDungeonSet/Obj/tile_flat.png" type="Texture" id=2]
[ext_resource path="res://Assets/VoxelDungeonSet/Obj/tile_raised.obj" type="ArrayMesh" id=3]
[ext_resource path="res://Assets/VoxelDungeonSet/Obj/tile_flat.obj" type="ArrayMesh" id=4]

[sub_resource type="Shader" id=10]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec3 circle_origin;
const float circle_radius = 0.01;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	
	
	float result;
	float xsqr = (UV.x - circle_origin.x) * (UV.x - circle_origin.x);
	float zsqr = (UV.y - circle_origin.z) * (UV.y - circle_origin.z);
	if (xsqr + zsqr - circle_radius*circle_radius < 0.26){
		result = 7.0;
	}
	else{
		result = 0.1;
	}
	float efactor = result;
	
	EMISSION = (emission.rgb+emission_tex)*emission_energy*efactor;
    
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/emission = Color( 0.792157, 0.952941, 1, 1 )
shader_param/emission_energy = 0.1
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/circle_origin = null
shader_param/texture_albedo = ExtResource( 2 )

[sub_resource type="PhysicsMaterial" id=7]

[sub_resource type="BoxShape" id=5]
extents = Vector3( 0.798211, 0.143776, 0.794928 )

[sub_resource type="Shader" id=8]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/emission = Color( 0.984314, 0, 0.894118, 1 )
shader_param/emission_energy = 0.2
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 2 )

[node name="Node" type="Node"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0.0271301, 7.62939e-06, 0.0390701 )
mesh = ExtResource( 3 )
material/0 = SubResource( 11 )
__meta__ = {
"_edit_group_": true
}

[node name="StaticBody" type="StaticBody" parent="MeshInstance"]
physics_material_override = SubResource( 7 )

[node name="CollisionShape" type="CollisionShape" parent="MeshInstance/StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.152997, 0 )
shape = SubResource( 5 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0.0155554, -0.0230694, 0.0212135 )
mesh = ExtResource( 4 )
material/0 = SubResource( 9 )
__meta__ = {
"_edit_group_": true
}

[node name="StaticBody" type="StaticBody" parent="MeshInstance2"]
physics_material_override = SubResource( 7 )

[node name="CollisionShape" type="CollisionShape" parent="MeshInstance2/StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.152997, 0 )
shape = SubResource( 5 )
