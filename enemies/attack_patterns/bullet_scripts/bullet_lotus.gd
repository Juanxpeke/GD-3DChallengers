extends Node
class_name BulletLotus

"Bullets generated by a 2d curve"
var path_of_bullets : PoolVector2Array
var curve : Curve2D
var time_offset : float
var execution_time : float
var time_between_bullets : float
var initial_y : float

var timer = 0
var vec_index = 0
var bullet_scene : PackedScene = preload("res://enemies/attack_patterns/bullet_scenes/remi_bullet.tscn")
var path_trail : PackedScene = preload("res://enemies/attack_patterns/bullet_scenes/path_tracer.tscn")
var particle_object : Spatial
var prev : Vector2
var final_n_bullets = 30

func _init(curve: Curve2D, time_offset : float, execution_time : float, initial_y : float):
	self.curve = curve
	path_of_bullets = curve.get_baked_points()
	self.time_offset = time_offset
	self.execution_time = execution_time
	self.initial_y = initial_y
	time_between_bullets = execution_time / path_of_bullets.size()
	prev = curve.get_point_position(0)
	
func _ready():
	particle_object = path_trail.instance()
	particle_object.set_ttl(time_offset,  execution_time)
	get_parent().add_child(particle_object)
	particle_object.global_transform.origin = Vector3(path_of_bullets[0].x, initial_y, path_of_bullets[0].y)
	
func _process(delta):
	# mueve la weaita que marca el camino de las balas
	if timer < time_offset:
		var fofs = (timer / time_offset) * curve.get_baked_length()
		var vec2 = curve.interpolate_baked(fofs)
		var angle = Vector2.UP.angle_to(vec2-prev)
		particle_object.rotation = Vector3(0, -angle, 0)
		particle_object.global_transform.origin = Vector3(vec2.x, initial_y, vec2.y)
		prev = vec2
	# se crean las balas por el camino
	else:
		while timer > vec_index * time_between_bullets + time_offset:
			var bullet = generate_bullet()
			_bullet_transform(bullet)
			vec_index += 1
			if vec_index == path_of_bullets.size():
				_finale(bullet.global_transform.origin)
				break
	timer += delta

func _finale(final_pos : Vector3):
	for i in range(final_n_bullets):
		var bullet = generate_bullet()
		bullet.bullet_speed_curve = Curve.new()
		bullet.bullet_speed_curve.add_point(Vector2(0, 0.5))
		var angle = 2*PI*i/final_n_bullets
		bullet.rotate_y(angle)
		bullet.scale = Vector3(3, 3, 3)
		bullet.global_transform.origin = final_pos
	queue_free()
	
func generate_bullet():
	var bullet = bullet_scene.instance()
	var scene_root = get_parent()
	scene_root.add_child(bullet)
	return bullet
	
func _bullet_transform(bullet):
	var angle = rand_range(0, 2*PI)
	bullet.rotate_y(angle)
	bullet.scale = Vector3(3, 3, 3)
	bullet.global_transform.origin = Vector3(path_of_bullets[vec_index].x, initial_y, path_of_bullets[vec_index].y)
